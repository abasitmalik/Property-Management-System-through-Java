import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;



public class PropertyManagementGUI extends JFrame {
 private PropertyManagementSystem propertyManagementSystem;
    private JTextArea outputTextArea;
    private String loggedInUser;
    private static final String PROPERTY_FILE = "Properties.txt";
    private static final String RENTAL_FILE = "Rentals.txt";
    private static final String SALE_FILE = "Sales.txt";
    
    


    public PropertyManagementGUI() {
       
        propertyManagementSystem = new PropertyManagementSystem();
        initializeUI();
        initializeFiles();
    }
    private void initializeFiles() {
        File propertyFile = new File(PROPERTY_FILE);
        File rentalFile = new File(RENTAL_FILE);
        File saleFile = new File(SALE_FILE);

        try {
            propertyFile.createNewFile();
            rentalFile.createNewFile();
            saleFile.createNewFile();
        } catch (IOException e) {
            System.err.println("Error creating files: " + e.getMessage());
        }
    }

    

    private void writePropertyToFile(Property property) {
        try (FileWriter writer = new FileWriter(PROPERTY_FILE, true);
             BufferedWriter bufferedWriter = new BufferedWriter(writer);
             PrintWriter out = new PrintWriter(bufferedWriter)) {
            out.println(property.getPropertyDetailsForFile()); // Assuming it returns a formatted string
        } catch (IOException e) {
            System.err.println("Error writing property to file: " + e.getMessage());
        }
    }

    private ArrayList<Property> readPropertiesFromFile() {
        ArrayList<Property> properties = new ArrayList<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(PROPERTY_FILE))) {
            String line;
            while ((line = reader.readLine()) != null) {
               
            }
        } catch (IOException e) {
            System.err.println("Error reading properties from file: " + e.getMessage());
        }
        return properties;
    }

    private Property parsePropertyFromLine(String line) {
        String[] parts = line.split(",");
        if (parts.length == 2) {
            String address = parts[0].trim();
            double rentAmount = Double.parseDouble(parts[1].trim());
            return new Property(address, rentAmount);
        } else {
            System.err.println("Invalid line format: " + line);
        return null;
        }
    }
    private Rental parseRentalFromLine(String line) {
    String[] parts = line.split(",");
    if (parts.length == 4) { 
        String propertyAddress = parts[0].trim();
        String tenantName = parts[1].trim();
        String tenantContact = parts[2].trim();
        try {
            int duration = Integer.parseInt(parts[3].trim());
            return new Rental(propertyAddress, tenantName, tenantContact, duration);
        } catch (NumberFormatException e) {
            System.err.println("Error parsing duration for line: " + line);
            return null;
        }
    } else {
        System.err.println("Invalid rental line format: " + line);
        return null;
    }
}

private ArrayList<Rental> readRentalsFromFile() {
    ArrayList<Rental> rentals = new ArrayList<>();
    try (BufferedReader reader = new BufferedReader(new FileReader(RENTAL_FILE))) {
        String line;
        while ((line = reader.readLine()) != null) {
            Rental rental = parseRentalFromLine(line);
            if (rental != null) {
                rentals.add(rental);
            }
        }
    } catch (IOException e) {
        System.err.println("Error reading rentals from file: " + e.getMessage());
    }
    return rentals;
}

    private Sale parseSaleFromLine(String line) {
    String[] parts = line.split(",");
    if (parts.length == 5) { // Assuming the format: "propertyAddress,salePrice,buyerName,buyerContact,occupied"
        String propertyAddress = parts[0].trim();
        try {
            double salePrice = Double.parseDouble(parts[1].trim());
            String buyerName = parts[2].trim();
            String buyerContact = parts[3].trim();
            boolean occupied = Boolean.parseBoolean(parts[4].trim()); // Assuming the last part represents 'occupied' as a boolean

            Buyer buyer = new Buyer(buyerName, buyerContact);

            return new Sale(propertyAddress, salePrice, buyer, occupied);
        } catch (NumberFormatException e) {
            System.err.println("Error parsing sale price for line: " + line);
            return null;
        }
    } else {
        System.err.println("Invalid sale line format: " + line);
        return null;
    }
}

private ArrayList<Sale> readSalesFromFile() {
    ArrayList<Sale> sales = new ArrayList<>();
    try (BufferedReader reader = new BufferedReader(new FileReader(SALE_FILE))) {
        String line;
        while ((line = reader.readLine()) != null) {
            Sale sale = parseSaleFromLine(line);
            if (sale != null) {
                sales.add(sale);
            }
        }
    } catch (IOException e) {
        System.err.println("Error reading sales from file: " + e.getMessage());
    }
    return sales;
}
   
    
    private void initializeUI() {
        setTitle("Property Management System");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(400, 300);
        setLocationRelativeTo(null);
        

        displayLoginPanel();
    }

    private void displayLoginPanel() {
        JPanel loginPanel = new JPanel();
        loginPanel.setLayout(new GridLayout(3, 1));

        JTextField usernameField = new JTextField();
        JPasswordField passwordField = new JPasswordField();
        JButton loginButton = new JButton("Login");

        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                
                String username = usernameField.getText();
                String password = new String(passwordField.getPassword());

                if (isValidUser(username, password)) {
                    loggedInUser = username;
                    getContentPane().removeAll();
                    displayMainPanel();
                    revalidate();
                } else {
                    JOptionPane.showMessageDialog(null, "Invalid username or password!");
                }
            }
        });

        loginPanel.add(new JLabel("Username:"));
        loginPanel.add(usernameField);
        loginPanel.add(new JLabel("Password:"));
        loginPanel.add(passwordField);
        loginPanel.add(loginButton);
        setResizable(false);

        add(loginPanel);
    }
    

    private void displayMainPanel() {
        JPanel mainPanel = new JPanel(new BorderLayout());

        JPanel buttonPanel = new JPanel(new GridLayout(7, 1));
        JButton addPropertyButton = new JButton("Add Property");
        JButton removePropertyButton = new JButton("Remove Property");
        JButton addSaleButton = new JButton("Add Sale");
        JButton rentPropertyButton = new JButton("Rent Property");
        JButton displayPropertiesButton = new JButton("Display Properties");
        JButton displayRentalsButton = new JButton("Display Rentals");
        JButton displaySalesButton = new JButton("Display Sales");

        buttonPanel.add(addPropertyButton);
        buttonPanel.add(removePropertyButton);
        buttonPanel.add(addSaleButton);
        buttonPanel.add(rentPropertyButton);
        buttonPanel.add(displayPropertiesButton);
        buttonPanel.add(displayRentalsButton);
        buttonPanel.add(displaySalesButton);

        outputTextArea = new JTextArea(20, 40);
        outputTextArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(outputTextArea);

        mainPanel.add(buttonPanel, BorderLayout.WEST);
        mainPanel.add(scrollPane, BorderLayout.CENTER);

        setResizable(true);
        add(mainPanel);

        addPropertyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String address = JOptionPane.showInputDialog("Enter property address:");
                double rent = Double.parseDouble(JOptionPane.showInputDialog("Enter rent amount:"));
                Property newProperty = new Property(address, rent);
                propertyManagementSystem.addProperty(newProperty);
                outputTextArea.setText("");
                outputTextArea.append("Property added successfully.\n");
                writePropertyToFile(newProperty);
            }
        });

        removePropertyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String removePropertyAddress = JOptionPane.showInputDialog("Enter property address to remove:");
                Property propertyToRemove = propertyManagementSystem.findPropertyByAddress(removePropertyAddress);
                if (propertyToRemove != null) {
                    propertyManagementSystem.removeProperty(propertyToRemove);
                    outputTextArea.setText("");
                    outputTextArea.append("Property removed successfully.\n");
                } else {
                    outputTextArea.setText("");
                    outputTextArea.append("Property not found.\n");
                }
            }
        });

        addSaleButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String salePropertyAddress = JOptionPane.showInputDialog("Enter property address for sale:");
                Property saleProperty = propertyManagementSystem.findPropertyByAddress(salePropertyAddress);
                if (saleProperty != null) {
                    if (!saleProperty.isForSale()) {
                        double salePrice = Double.parseDouble(JOptionPane.showInputDialog("Enter sale price:"));
                        String buyerName = JOptionPane.showInputDialog("Enter buyer name:");
                        String buyerContact = JOptionPane.showInputDialog("Enter buyer contact info:");
                        Buyer buyer = new Buyer(buyerName, buyerContact);
                        Sale sale = new Sale(saleProperty, salePrice, buyer);
                        propertyManagementSystem.addSale(sale);
                        saleProperty.setForSale(true);
                        saleProperty.setCurrentOwner(buyer);
                        saleProperty.setOccupied(true); 
                        outputTextArea.setText("");
                        outputTextArea.append("Sale added successfully.\n");
                         writeSaleToFile(sale);
                    } else {
                        outputTextArea.setText("");
                        outputTextArea.append("Property is already for sale.\n");
                    }
                } else {
                    outputTextArea.setText("");
                    outputTextArea.append("Property not found.\n");
                }
            }

            private void writeSaleToFile(Sale sale) {
                throw new UnsupportedOperationException("Not supported yet."); 
            }
        });
        

        rentPropertyButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String rentPropertyAddress = JOptionPane.showInputDialog("Enter property address to rent:");
                Property rentProperty = propertyManagementSystem.findPropertyByAddress(rentPropertyAddress);
                if (rentProperty != null) {
                    String tenantName = JOptionPane.showInputDialog("Enter tenant name:");
                    String tenantContact = JOptionPane.showInputDialog("Enter tenant contact info:");
                    Tenant newTenant = new Tenant(tenantName, tenantContact);
                    int duration = Integer.parseInt(JOptionPane.showInputDialog("Enter rental duration (in months):"));
                    Rental rental = propertyManagementSystem.rentProperty(rentProperty, newTenant, duration);
                    if (rental != null) {
            outputTextArea.setText("");
            outputTextArea.append("Property rented successfully.\n");
            writeRentalToFile(rental); //  write rental information to file
        } else {
            outputTextArea.setText("");
            outputTextArea.append("Property not available for rent.\n");
        }
    }
    }

    private void writeRentalToFile(Rental rental) {
       try (FileWriter writer = new FileWriter(RENTAL_FILE, true);
         BufferedWriter bufferedWriter = new BufferedWriter(writer);
         PrintWriter out = new PrintWriter(bufferedWriter)) {
        out.println(rental.getRentalDetailsForFile()); // returns formatted rental information
    } catch (IOException e) {
        System.err.println("Error writing rental to file: " + e.getMessage());
    }
}
});


        displayPropertiesButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                outputTextArea.setText("");
                propertyManagementSystem.displayProperties(outputTextArea);
            }
        });

        displayRentalsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                outputTextArea.setText("");
                propertyManagementSystem.displayRentals(outputTextArea);
            }
        });

        displaySalesButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                outputTextArea.setText("");
                propertyManagementSystem.displaySales(outputTextArea);
            }
        });
    }
    

    private boolean isValidUser(String username, String password) {
        
        return username.equals("admin") && password.equals("admin");
    }

  public static void main(String[] args) {
       javax.swing.SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                new PropertyManagementGUI().setVisible(true);
            }
        });
    }
}
